generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email                  String          @id
  name                   String          @db.VarChar(50)
  photo                  String?         @db.VarChar(1000)
  bio                    String?         @db.VarChar(10000)
  posts                  Post[]
  comments               Comment[]
  schoolName             String?
  joinedOn               DateTime        @default(now())
  friends                Friendship[]    @relation("friends")
  friendRelations        Friendship[]    @relation("friendRelations")
  friendRequestsRecieved FriendRequest[] @relation("friendRequestsRecieved")
  friendRequestSent      FriendRequest[] @relation("friendRequestSent")
}

model Friendship {
  friend                  User    @relation("friends", fields: [friendEmail], references: [email])
  friendEmail             String
  user                    User    @relation("friendRelations", fields: [userEmail], references: [email])
  userEmail               String
  relationshipDescription String?

  @@id([friendEmail, userEmail])
}

model FriendRequest {
  toUser        User   @relation("friendRequestsRecieved", fields: [toUserEmail], references: [email])
  toUserEmail   String
  fromUser      User   @relation("friendRequestSent", fields: [fromUserEmail], references: [email])
  fromUserEmail String

  @@id([toUserEmail, fromUserEmail])
}

model Post {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  text           String         @db.VarChar(100000)
  poster         User           @relation(fields: [posterEmail], references: [email])
  posterEmail    String
  comments       Comment[]
  commentCount   Int            @default(0)
  postVisibility PostVisibility
  postedOn       DateTime       @default(now())
}

enum PostVisibility {
  PUBLIC
  DISTRICT
  PRIVATE
}

model Comment {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  text           String    @db.VarChar(1000)
  commenter      User      @relation(fields: [commenterEmail], references: [email])
  commenterEmail String
  replyTo        Comment?  @relation("replyTo", fields: [replyToId], references: [id])
  replyToId      String?   @db.Uuid
  replies        Comment[] @relation("replyTo")
  post           Post      @relation(fields: [postId], references: [id])
  postId         String    @db.Uuid
  commentedOn    DateTime  @default(now())
}

model District {
  emailDomain String   @id
  name        String
  School      School[]
}

model School {
  name        String
  emailDomain String
  district    District? @relation(fields: [emailDomain], references: [emailDomain])

  @@id([name, emailDomain])
}
